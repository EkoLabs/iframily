{"version":3,"sources":["webpack://Iframily/webpack/universalModuleDefinition","webpack://Iframily/webpack/bootstrap","webpack://Iframily/./src/constants.js","webpack://Iframily/./src/base.js","webpack://Iframily/./src/iframily.js","webpack://Iframily/./src/child.js","webpack://Iframily/./src/parent.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PARENT","CHILD","FRAMILY_ID_PREFIX","FRAMILY_INIT","FRAMILY_INIT_SUCCESSFUL","ATTEMPT_TO_CONNECT_INTERVAL","constants","require","PUBLIC_METHODS","id","msgHandler","options","this","_id","_onPairedHandler","onPairedHandler","_onDisposedHandler","onDisposedHandler","_targetOrigin","targetOrigin","_iframilyUid","_msgHandler","_hasConnected","_disposed","_msgQueue","_pendingCb","_cbUid","_bindPublicMethods","_init","forEach","method","Error","msgQueueFunc","wrappedMsg","_targetWindow","postMessage","err","console","error","msg","cbDefer","_fromType","_iframilyType","forceSend","_postMessage","warn","push","cbUid","_isResponse","_isResolved","isResolved","_isRejected","isRejected","_cbResolveValue","_cbRejectError","_handleResponse","Promise","resolve","then","_sendResponse","reject","_displayDisposedError","_sendMessage","Child","Parent","parentFramilies","childFramilies","disposed","event","eventData","data","includes","Base","parent","_handleMessage","addEventListener","_attemptToConnectInterval","setInterval","attemptToConnectFunc","clearInterval","_sendQueuedMessages","removeEventListener","iframes","document","getElementsByTagName","length","contentWindow","source"],"mappings":"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","file":"iframily.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Iframily\"] = factory();\n\telse\n\t\troot[\"Iframily\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","'use strict';\n\nmodule.exports = {\n    PARENT: 'parent',\n    CHILD: 'child',\n    FRAMILY_ID_PREFIX: '__iframily__',\n    FRAMILY_INIT: 'iframily_init',\n    FRAMILY_INIT_SUCCESSFUL: 'iframily_init_successful',\n    ATTEMPT_TO_CONNECT_INTERVAL: 200\n};\n","'use strict';\n\nconst constants = require('./constants');\n\nconst PUBLIC_METHODS = ['sendMessage', 'dispose'];\n\nmodule.exports = class Base {\n    constructor(id, msgHandler, options) {\n        this._id = id;\n\n        this._onPairedHandler = options.onPairedHandler || function() {};\n        this._onDisposedHandler = options.onDisposedHandler || function() {};\n        this._targetOrigin = options.targetOrigin || '*';\n\n        // Identifier for all messages.\n        // This will allow us to identify iframily messages and to match parent and child.\n        this._iframilyUid = `${constants.FRAMILY_ID_PREFIX}${this._id}`;\n\n        this._msgHandler = msgHandler || function() {};\n        this._hasConnected = false;\n        this._disposed = false;\n\n        // Queue for messages requested to be sent before connection was made.\n        this._msgQueue = [];\n\n        this._pendingCb = {};\n        this._cbUid = 0;\n\n        // Fix (public) methods binding to 'this'.\n        this._bindPublicMethods();\n\n        this._init();\n    }\n\n    // #region PRIVATE METHODS\n\n    _bindPublicMethods() {\n        PUBLIC_METHODS.forEach(function(method) {\n            this[method] = this[method].bind(this);\n        }.bind(this));\n    }\n\n    _init() { throw new Error('To be overridden in extending classes.'); }\n\n    // Sends all the queued messages.\n    _sendQueuedMessages() {\n        this._msgQueue.forEach((msgQueueFunc) => {\n            msgQueueFunc();\n        });\n\n        this._msgQueue = [];\n    }\n\n    // The acutal 'postMessage' action.\n    _postMessage(wrappedMsg) {\n        try {\n            this._targetWindow.postMessage(wrappedMsg, this._targetOrigin);\n        } catch (err) {\n            console.error('[Iframily] - Error when posting message:', err);\n        }\n    }\n\n    // Sends a message.\n    _sendMessage(msg, cbDefer, options = {}) {\n        let wrappedMsg = {\n            _iframilyUid: this._iframilyUid,\n            _fromType: this._iframilyType,\n            msg: msg\n        };\n\n        // Callbacks logic.\n        if (cbDefer) {\n            this._cbUid++;\n            this._pendingCb[this._cbUid] = cbDefer;\n            wrappedMsg._cbUid = this._cbUid;\n        }\n\n        // If connected (or force send requested), send the message.\n        // Otherwise, add it to the message queue.\n        if (this._hasConnected || options.forceSend) {\n            this._postMessage(wrappedMsg);\n        } else {\n            // eslint-disable-next-line no-console\n            console.warn('[Iframily] - No one connected yet, queuing message', msg);\n            this._msgQueue.push(this._postMessage.bind(this, wrappedMsg));\n        }\n    }\n\n    // Posts a response.\n    _sendResponse(cbUid, options) {\n        let wrappedMsg = {\n            _iframilyUid: this._iframilyUid,\n            _fromType: this._iframilyType,\n            _isResponse: true,\n\n            _cbUid: cbUid,\n            _isResolved: options.isResolved,\n            _isRejected: options.isRejected,\n            _cbResolveValue: options.value,\n            _cbRejectError: options.err,\n        };\n\n        this._postMessage(wrappedMsg);\n    }\n\n    /* NOTE: overridden in extending class */\n    _handleMessage(wrappedMsg) {\n        if (wrappedMsg._isResponse) {\n            this._handleResponse(wrappedMsg);\n        } else {\n            Promise.resolve()\n                .then(() => {\n                    return this._msgHandler(wrappedMsg.msg);\n                })\n                .then((value) => { this._sendResponse(wrappedMsg._cbUid, { isResolved: true, value: value }); })\n                .catch((err) => { this._sendResponse(wrappedMsg._cbUid, { isRejected: true, err: err }); });\n        }\n    }\n\n    // Resolve the original message promise with the response value.\n    _handleResponse(wrappedMsg) {\n        if (wrappedMsg._cbUid) {\n            let cbDefer = this._pendingCb[wrappedMsg._cbUid];\n            if (wrappedMsg._isResolved) {\n                cbDefer.resolve(wrappedMsg._cbResolveValue);\n            } else if (wrappedMsg._isRejected) {\n                cbDefer.reject(wrappedMsg._cbRejectError);\n            } else {\n                throw new Error(`Missing resolve/reject information on response: ${wrappedMsg}`);\n            }\n\n            // Cleanup.\n            delete this._pendingCb[wrappedMsg._cbUid];\n        }\n    }\n\n    _displayDisposedError() {\n        console.error('[Iframily] - Attempting to use a disposed instance');\n    }\n\n    // #endregion\n\n    // #region MAIN API\n\n    sendMessage(msg) {\n        if (this._disposed) {\n            return this._displayDisposedError();\n        }\n\n        return new Promise((resolve, reject) => {\n            this._sendMessage(msg, { resolve, reject });\n        });\n    }\n\n    /* NOTE: overridden in extending class */\n    dispose() {\n        if (this._disposed) {\n            return this._displayDisposedError();\n        }\n\n        this._hasConnected = false;\n        this._msgQueue = [];\n\n        this._disposed = true;\n        this._onDisposedHandler();\n    }\n\n    get disposed() {\n        return this._disposed;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    // #endregion\n};\n","'use strict';\n\nconst Child = require('./child');\nconst Parent = require('./parent');\nconst constants = require('./constants');\n\nlet parentFramilies = {};\nlet childFramilies = {};\n\nmodule.exports = class Iframily {\n    static initParent(id, msgHandler, options = {}) {\n        if (parentFramilies[id] && !parentFramilies[id].disposed) {\n            // eslint-disable-next-line max-len\n            console.error(`[Iframily] - A parent iframily with id \"${id}\" was already inited, please use another id or dispose the existing one first.`);\n            return;\n        }\n\n        parentFramilies[id] = new Parent(id, msgHandler, options);\n        return parentFramilies[id];\n    }\n\n    static initChild(id, msgHandler, options = {}) {\n        if (childFramilies[id] && !childFramilies[id].disposed) {\n            // eslint-disable-next-line max-len\n            console.error(`[Iframily] - A child iframily with id \"${id}\" was already inited, please use another id or dispose the existing one first.`);\n            return;\n        }\n\n        childFramilies[id] = new Child(id, msgHandler, options);\n        return childFramilies[id];\n    }\n\n    static isIframilyMessage(event) {\n        let eventData = event && event.data;\n        return eventData && eventData._iframilyUid && eventData._iframilyUid.includes(constants.FRAMILY_ID_PREFIX);\n    }\n};\n","'use strict';\n\nconst Base = require('./base');\nconst constants = require('./constants');\n\nmodule.exports = class Child extends Base {\n    _init() {\n        this._iframilyType = constants.CHILD;\n        this._targetWindow = window.parent;\n\n        this._handleMessage = this._handleMessage.bind(this);\n        window.addEventListener('message', this._handleMessage);\n\n        // Attempt to connect to parent in interval (do first attempt immediately).\n        let attemptToConnectFunc = () => {\n            // 'forceSend' set true since we want to send this message even though we are not connected yet.\n            this._sendMessage(constants.FRAMILY_INIT, null, { forceSend: true });\n\n            return attemptToConnectFunc;\n        };\n        this._attemptToConnectInterval = setInterval(attemptToConnectFunc(), constants.ATTEMPT_TO_CONNECT_INTERVAL);\n    }\n\n    _handleMessage(event) {\n        let eventData = event && event.data;\n\n        // Only handle this iframily message (according id).\n        if (eventData && eventData._iframilyUid === this._iframilyUid && eventData._fromType === constants.PARENT) {\n            // If not connected and got init successful message => init connection.\n            // If connected => handle it.\n            if (!this._hasConnected && eventData.msg === constants.FRAMILY_INIT_SUCCESSFUL) {\n                this._hasConnected = true;\n                clearInterval(this._attemptToConnectInterval);\n\n                this._onPairedHandler();\n\n                this._sendQueuedMessages();\n            } else if (this._hasConnected) {\n                super._handleMessage(eventData);\n            }\n        }\n    }\n\n    dispose() {\n        super.dispose();\n\n        window.removeEventListener('message', this._handleMessage);\n\n        // Don't attempt to connect anymore.\n        clearInterval(this._attemptToConnectInterval);\n    }\n};\n","'use strict';\n\nconst Base = require('./base');\nconst constants = require('./constants');\n\nmodule.exports = class Parent extends Base {\n    _init() {\n        this._iframilyType = constants.PARENT;\n\n        this._handleMessage = this._handleMessage.bind(this);\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    _handleMessage(event) {\n        let eventData = event && event.data;\n\n        // Only handle this iframily message (according id) and originating from child.\n        if (eventData && eventData._iframilyUid === this._iframilyUid && eventData._fromType === constants.CHILD) {\n            // If got init request (and not connected already) => init connection.\n            // If connected => handle it.\n            if (eventData.msg === constants.FRAMILY_INIT) {\n                // Child might still be sending connection init messages even though\n                // we already started the connection process, ignore them.\n                if (!this._hasConnected) {\n                    // Find the IFrame that sent this event using 'event.source'.\n                    // NOTE: This get only the top level IFrames (which is good).\n                    let iframes = document.getElementsByTagName('iframe');\n                    for (let i = 0; i < iframes.length; i++) {\n                        if (iframes[i].contentWindow === event.source) {\n                            this._targetWindow = iframes[i].contentWindow;\n\n                            // Set that we are connected and send init successful message.\n                            // NOTE: Setting connected first is important in order for the message to be sent.\n                            this._hasConnected = true;\n\n                            this._onPairedHandler();\n\n                            // NOTE: Sending the 'init successful' event before sending queued messages is also important\n                            // NOTE: in order for child to be connected before receiving messages.\n                            this._sendMessage(constants.FRAMILY_INIT_SUCCESSFUL);\n\n                            this._sendQueuedMessages();\n                            break;\n                        }\n                    }\n                }\n            } else if (this._hasConnected) {\n                super._handleMessage(eventData);\n            }\n        }\n    }\n\n    dispose() {\n        super.dispose();\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n};\n"],"sourceRoot":""}